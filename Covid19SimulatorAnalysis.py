# -*- coding: utf-8 -*-
"""COVID19ModelAccuracy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lIc2kr8G73AxiGTcfzt_N9ZUSCegoOK3
"""

#import libraries
import csv
import pandas as pd
import matplotlib.pyplot as plt
import math
import numpy as np
import statistics


#COVID-19 Simulator Predictions for PA
url = 'https://raw.githubusercontent.com/IvanVoinovGitHub/Covid19-Analysis-Modeling/main/Data/dataFile_new_diag_cases_State-level.csv'
df1 = pd.read_csv(url)

#Actual Daily Cases for PA
url2 = 'https://raw.githubusercontent.com/IvanVoinovGitHub/Covid19-Analysis-Modeling/main/Data/COVID-19_Aggregate_Cases_Current_Daily_County_Health.csv'
df2 = pd.read_csv(url2)

#check types of data frames
type(df1)
type(df2)

#convert date to datetime object
df1['dates'] = pd.to_datetime(df1['dates'])
df2['Date'] = pd.to_datetime(df2['Date'])

#sort datasets by date
df1.sort_values(by='dates')
df2.sort_values(by='Date')

df1.rename(columns = {'dates':'Date'}, inplace = True)
df2.rename(columns = {'dates':'Date'}, inplace = True)

print(df1)

#need to group the Actual Daily Cases for PA by date
df2_groupedbydate = df2.groupby(["Date"]).sum()
print(df2_groupedbydate)

#Merge Datasets on Data attribute
merged_inner = pd.merge(left=df2_groupedbydate, right=df1, left_on='Date', right_on='Date')
merged_inner

#Create plot of Actual vs. Predicted Cases

#Actual Cases Line
plt.plot(merged_inner['Date'], merged_inner['New Cases'], color='g', label='Actual Cases')

#Predicted Cases Line
plt.plot(merged_inner['Date'], merged_inner['reportedValues'], color='r', label='Predicted Cases')

#Create XY Labels and Title
plt.xlabel('Date (Year/Month/Day)') 
plt.ylabel('Number of Cases') 
plt.title("Predicted Daily Cases vs Actual Cases in PA (Covid-19 Simulator)")

#Display Plot
plt.legend()
plt.show()

type(merged_inner)

merged_inner['New Cases'][13]
merged_inner['reportedValues'][7]

#error calculations
#confirmed = merged_inner['New Cases']
#projected = merged_inner["reportedValues"]
error = []

for index, row in merged_inner.iterrows():
  error.append((abs(row['New Cases'] - row["reportedValues"])) / row['New Cases'])

print(error)

#accuracy calculations
accuracy = []

for i in error:
  accuracy.append(1 - i)

print(accuracy)

#Create Error and Accuracy Column and insert list data
merged_inner['Error'] = error
merged_inner['Accuracy'] = accuracy

print(merged_inner)

from IPython.core.pylabtools import figsize
#Create plot of Error

#Error Line
plt.plot(merged_inner['Date'], merged_inner['Error'], color='g', label='Error')


#Create XY Labels and Title
plt.xlabel('Date (Year/Month/Day)') 
plt.ylabel('Percentage') 
plt.title("Predicted Daily COVID-19 Case Error in PA (Covid-19 Simulator)")
#Display Plot
plt.legend()
plt.show()

#Create plot of Accuracy

#Accuracy Line
plt.plot(merged_inner['Date'], merged_inner['Accuracy'], color='r', label='Daily Accuracy')

#Create XY Labels and Title
plt.xlabel('Date (Year/Month/Day)') 
plt.ylabel('Percentage') 
plt.title("Predicted Daily COVID-19 Case Accuracy in PA (Covid-19 Simulator)")

#Display Plot
plt.legend()
plt.show()

#Calculate Weekly Accuracy Averages
weeklyAccuracy = 0
averageWeeklyAccuracy = []
length = len(accuracy)
amountOfWeeks = int(length / 7)
remainderDays = length % 7

i = 0
while i < length:
  weeklyAccuracy += accuracy[i]
  if (i + 1) % 7 == 0 and amountOfWeeks > 0:
    averageWeeklyAccuracy.append(weeklyAccuracy / 7)
    amountOfWeeks -= 1
    weeklyAccuracy = 0
  if (i + 1) % remainderDays == 0 and remainderDays > 0 and amountOfWeeks == 0:
    averageWeeklyAccuracy.append(weeklyAccuracy / remainderDays)
    weeklyAccuracy = 0
  i += 1

weeklyDateList = []
i = 0
weeklyDateList.append(merged_inner['Date'][i])
while i < length:
  if (i + 1) % 7 == 0:
    weeklyDateList.append(merged_inner['Date'][i])
  i += 1

#Create Dataframe for Weekly Accuracy
i = 0
data = []
while i < len(averageWeeklyAccuracy):
  data.append([weeklyDateList[i], averageWeeklyAccuracy[i]])
  i += 1

df = pd.DataFrame(data, columns = ['Week Of', 'Average Weekly Accuracy'])

#Create plot of Weekly Accuracy

#Accuracy Line
plt.plot(df['Week Of'], df['Average Weekly Accuracy'], color='r', label='Weekly Accuracy')

#Create XY Labels and Title
plt.xlabel('Week Of (Year/Month/Day)') 
plt.ylabel('Average Weekly Accuracy Percentage') 
plt.title("Predicted Daily COVID-19 Case Weekly Accuracy in PA (Covid-19 Simulator)")

#Display Plot
plt.legend()
plt.show()

#Calculate Monthly Accuracy Averages
#We are going to use an average of 30 days per month for these calculations

monthlyAccuracy = 0
averageMonthlyAccuracy = []
amountOfMonths = int(length / 30)
remainderDays = length % 30

i = 0
while i < length:
  monthlyAccuracy += accuracy[i]
  if (i + 1) % 30 == 0 and amountOfMonths > 0:
    averageMonthlyAccuracy.append(monthlyAccuracy / 30)
    amountOfMonths -= 1
    monthlyAccuracy = 0
  if (i + 1) % remainderDays == 0 and remainderDays > 0 and amountOfMonths == 0:
    averageMonthlyAccuracy.append(monthlyAccuracy / remainderDays)
    monthlyAccuracy = 0
  i += 1

weeklyDateListForMonths = []
i = 0
weeklyDateListForMonths.append(merged_inner['Date'][i])
while i < length:
  if (i + 1) % 30 == 0:
    weeklyDateListForMonths.append(merged_inner['Date'][i])
  i += 1

#Create Dataframe for Monthly Accuracy
i = 0
data = []
while i < len(averageMonthlyAccuracy):
  data.append([weeklyDateListForMonths[i], averageMonthlyAccuracy[i]])
  i += 1

df = pd.DataFrame(data, columns = ['Month Of', 'Average Monthly Accuracy'])

#Create plot of Monthly Accuracy

#Accuracy Line
plt.plot(df['Month Of'], df['Average Monthly Accuracy'], color='r', label='Monthly Accuracy')

#Create XY Labels and Title
plt.xlabel('Month Of (Year/Month/Day)') 
plt.ylabel('Average Monthly Accuracy Percentage') 
plt.title("Predicted Daily COVID-19 Case Monthly Accuracy in PA (Covid-19 Simulator)")

#Display Plot
plt.legend()
plt.show()

#Calculate Yearly Accuracy Averages
#We are going to use an average of 365 days per year for these calculations

yearlyAccuracy = 0
averageYearlyAccuracy = []
amountOfYears = int(length / 365)
remainderDays = length % 365

i = 0
while i < length:
  yearlyAccuracy += accuracy[i]
  if (i + 1) % 365 == 0 and amountOfYears > 0:
    averageYearlyAccuracy.append(yearlyAccuracy / 365)
    amountOfYears -= 1
    yearlyAccuracy = 0
  if (i + 1) % remainderDays == 0 and remainderDays > 0 and amountOfYears == 0:
    averageYearlyAccuracy.append(yearlyAccuracy / remainderDays)
    yearlyAccuracy = 0
  i += 1

weeklyDateListForYears = []
i = 0
weeklyDateListForYears.append(merged_inner['Date'][i])
while i < length:
  if (i + 1) % 365 == 0:
    weeklyDateListForYears.append(merged_inner['Date'][i])
  i += 1

print(averageYearlyAccuracy)

#Create Dataframe for Yearly Accuracy
i = 0
data = []
while i < len(averageYearlyAccuracy):
  data.append([weeklyDateListForYears[i], averageYearlyAccuracy[i]])
  i += 1

df = pd.DataFrame(data, columns = ['Year Of', 'Average Yearly Accuracy'])

#Create plot of Yearly Accuracy

#Accuracy Line
plt.plot(df['Year Of'], df['Average Yearly Accuracy'], color='r', label='Yearly Accuracy')

#Create XY Labels and Title
plt.xlabel('Year Of (Year/Month/Day)') 
plt.ylabel('Average Yearly Accuracy Percentage') 
plt.title("Predicted Daily COVID-19 Case Yearly Accuracy in PA (Covid-19 Simulator)")

#Display Plot
plt.legend()
plt.show()

#Calculate Overall Accuracy
overallAccuracy = merged_inner['Accuracy'].mean()
print(overallAccuracy)

#Create new dataframe for year 2022
data_2022 = merged_inner[(merged_inner['Date'] > '2022-01-01')]

#create error and accuracy lists for 2022
error_2022=[]
for index, row in data_2022.iterrows():
  error_2022.append((abs(row['New Cases'] - row["reportedValues"])) / row['New Cases'])

accuracy_2022 = []
for i in error_2022:
  accuracy_2022.append(1 - i)

#check head of 2022 data
data_2022.head(5)

#create plot for 2022 accuracy
plt.xlabel('Date (Month/Day)') 
plt.ylabel('Prediction Accuracy') 
plt.title("Accuracy Estimation for 2022 PA (Covid-19 Simulator)")

plt.plot(data_2022['Date'].dt.strftime('%m-%d'), accuracy_2022, label='Accuracy 2022')
plt.xticks(np.arange(0, len(data_2022['Date']), 7))

#cleans accuracy list of all nan values
newlist = [x for x in accuracy if math.isnan(x) == False]
print(newlist)

#calculate variance and st deviation of accuracy
var = sum((l-overallAccuracy)**2 for l in newlist) / len(newlist)
st_dev = math.sqrt(var)
print(var)
print(st_dev)

#calculate median of accuracy
accMedian = statistics.median(newlist)
print(accMedian)
